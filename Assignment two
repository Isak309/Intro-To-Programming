/** 
 * 
 * @description Assignment 02, practice using C++ classes.  In this assignment
 *   we encapsulate a retirement planning object, that can set the amount of periodic
 *   deposits, the interest rate, and time in years we have to save.  The
 *   retirement account planner object can calculate retirement savings and can
 *   do planning to determine how much we need to save in order to reach a
 *   retirement goal.
 */
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <sstream>

using namespace std;

/**
*  Is it okay to just set and get all my functions inside of my class at the same time as I initialize them?
*  Since I'm only setting a variable or returning a variable
*  I do not see any downsides to this but if it is not the correct way then I will initialize
*  them inside of my class and then later I will create functions outside of the class like I did here
*/

/**
*  Retirement Account class 
*  The function of this class is to be able to input and retrieve data from a user 
*  in order for them to see how much money they can make in t years from investing 
*  D amount of money every m months with an interest rate of r.
*
*  double D. My periodic deposite rate
*  int    m. The amount of months user has saved each year
*  double r. Interest rate
*  int    t. Amount of years user intends to save for
*
*  Two constructors. First one takes all the private variables and sets them to users 
*  choice
*  Second one is default constructor that is initialized right away
*  setting all private parameters equal to 1.0
* 
*  tostring() function is just a function that returns a string that 
*  represents values of the retirement account class
*
*  calculateRetirementSavings() function will implement the first formula we must use 
*  in order to calculate the total amount of savings the account will generate.
*  it will return that amount.
*
*  planRetirementDeposits() function will take a user desired input as a parameter
*  and it will implement the second equation given to return how much money must 
*  be deposited each period to meet the goal
*
*  Four setters that are void functions. Must have a parameter in the value
*  because we are setting one of the private variables to the user desired input
*
*  Four getters that must return a value which are return doubles
*/
class RetirementAccount
{
  private:
    double D;
    double m;
    double r;
    double t;
    
  public:
  	//Constructors
    RetirementAccount(double, double , double, double);
    RetirementAccount();
	
	//tostring function that returns a string that represents the values of RetirementAccount class
    string tostring();
    
    //calculateRetirementSavings() function
    double calculateRetirementSavings();
    
    //planRetirementDesposits() function
    double planRetirementDeposits(double);
    //Setters
    void set_D(double inputDepositAmount);
    void set_m(double inputDepositsPerYear);
    void set_r(double inputInterestRate);
    void set_t(double inputYearsToDeposite);

    //Getters
    double get_D();
    double get_m();
    double get_r();
    double get_t();

};

/**
*  Default class constructor.
*  sets all private values to 1.0
*  no parameters are needed
*/
RetirementAccount::RetirementAccount()
{
  D = 1.0;
  m = 1.0;
  r = 1.0;
  t = 1.0;
}
/**
*  Class constructor that takes 4 variables D, m, r, t as parameters
*  More elaborate names used for easier reading
*  @param despositAmount. This value user will input and then the function
*  will set that value to equal D
*  @param periodsPerYear This value user will input and then the function
*  will set that value to equal m
*  @param interestRate This value user will input and then the function
*  will set that value to equal r
*  @param timeInYears This value user will input and then the function
*  will set that value to equal t
*/
RetirementAccount::RetirementAccount(double despositAmount, double periodsPerYear, double interestRate, double timeInYears)
{
  D = despositAmount;
  m = periodsPerYear;
  r = interestRate;
  t = timeInYears;
}

/**
*  Setter functions. These functions purposes are to 
*  set the private variables from the RetirementAccount class
*  each function has a private variable as a parameter because
*  it will call that value and then replace it with the new value
*  that user inputs
*/
void RetirementAccount::set_D(double inputDepositAmount)
{
  D = inputDepositAmount;
};
void RetirementAccount::set_m(double inputDepositsPerYear)
{
  m = inputDepositsPerYear;
};
void RetirementAccount::set_r(double inputInterestRate)
{
  r = inputInterestRate;
};
void RetirementAccount::set_t(double inputYearsToDeposite)
{
  t = inputYearsToDeposite;
};
/**
*  Getter functions. These functions purposes are to 
*  retrieve the private variables from the RetirementAccount class
*  There functions do not need to have a parameter because we are
*  simply returning a value from class function. We are not changing
*  anything.
*  RetirementAccount::get_r() is r times 100 because its a percentage
*/
double RetirementAccount::get_D()
{
  return D;
};
double RetirementAccount::get_m()
{
  return m;
};
double RetirementAccount::get_r()
{
  return (r * 100);
};
double RetirementAccount::get_t()
{
  return t;
};
/**
*  tostring function. Function that you can call that will
*  output information about your account
*/

string RetirementAccount::tostring()
{	
  string result = "    D (deposit amount)   = $" + to_string(D) + " "; //this does not work
  result += "    m (periods per year) =  " + /* I don't know what to put here to get result*/ + " ";
  result += "    r (interest rate)    =  " + /* I don't know what to put here to get result*/ + " ";
  result += "    t (time in years)    =  " + /* I don't know what to put here to get result*/ + " ";
  return result;
}

/*
*  calculateRetirementSavings() function will implement the first formula we must use 
*  in order to calculate the total amount of savings the account will generate.
*  it will return that amount.
*/
double RetirementAccount::calculateRetirementSavings()
{
  double savings;
  savings = D * ((pow(1 + r/m, m*t))-1) / (r/m);
  return savings;
}

/*
*  planRetirementDeposits() function will implement the second formula
*  @param double savings - parameter used from user input to calculate how much
*  you need to save each month in order to get said parameter
*/
double RetirementAccount::planRetirementDeposits(double savings)
{
  double deposit;
  deposit = savings * ((r/m) / (pow(1 + (r/m), m*t)-1));
}
/** main 
 * The main entry point for this program.  Execution of this program
 * will begin with this main function.
 *
 * @param argc The command line argument count which is the number of
 *     command line arguments provided by user when they started
 *     the program.
 * @param argv The command line arguments, an array of character
 *     arrays.
 *
 * @returns An it value indicating program exit status.  Usually 0
 *     is returned to indicate normal exit and a non-zero value
 *     is returned to indicate an error condition.
 */
int main(int argc, char** argv)
{
  // test constructor
  cout << "=== Testing class creation using constructor..................." << endl << endl;
  RetirementAccount account(100.00, 10.0, 0.035, 22.0);

  // test getter methods
  cout << "=== Testing getter methods..................." << endl;
  cout << "Account: " << endl;
  cout << "    D (deposit amount)   = $" << fixed << setprecision(2) << account.get_D() << endl;
  cout << "    m (periods per year) =  " << fixed << setprecision(2) << account.get_m() << endl;
  cout << "    r (interest rate)    =  " << fixed << setprecision(4) << account.get_r() << endl;
  cout << "    t (time in years)    =  " << fixed << setprecision(2) << account.get_t() << endl;
  cout << endl;
  
  // test tostring()
  cout << "=== Testing tostring() method..................." << endl;
  //cout << "Account: " << endl << account.tostring() << endl;
  //cout << endl;
  
  // test setter methods
  cout << "=== Testing setter methods..................." << endl;
  account.set_D(500.00);
  account.set_m(12.0);
  account.set_r(0.048);
  account.set_t(25.00);
  //cout << "Account: " << endl << account.tostring() << endl;

  // test retirement savings calculation
  cout << "=== Testing retirement savings calculations..................." << endl;
  //cout << "My retirement savings: $"
  //     << fixed << setprecision(2)
  //     << account.calculateRetirementSavings() << endl;
  //cout << endl;
  
  // test retirement planning calculations
  cout << "=== Testing retirement planning calculations..................." << endl;
  //double newD = account.planRetirementDeposits(1000000.00);
  //cout << "In order to save 1 million dollars, we need to make monthly deposits of $"
  //     << fixed << setprecision(2)
  //     << newD;
  //cout << endl;

  //account.set_D(newD);
  //cout << "If we set our deposit to this new amount..." << endl;
  //cout << "Account: " << endl << account.tostring() << endl;
  //cout << "My retirement savings: $"
  //     << fixed << setprecision(2)
  //     << account.calculateRetirementSavings() << endl;
  //cout << endl;

  // an additional test of savings and planning calculations
  cout << "=== Second test on account2 of savings and planning..................." << endl;
  //RetirementAccount account2(650.00, 9.0, 0.035, 30.0);
  //cout << "Account 2:" << endl << account2.tostring() << endl;
  //cout << "My retirement savings: $"
  //     << fixed << setprecision(2)
  //     << account2.calculateRetirementSavings() << endl;
  //cout << endl;

  //newD = account2.planRetirementDeposits(2000000.00);
  //cout << "In order to save 2 million dollars, we need to make deposits of $"
  //     << fixed << setprecision(2)
  //     << newD;
  //cout << endl;

  //account2.set_D(newD);
  //cout << "If we set our deposit to this new amount..." << endl;
  //cout << "Account: " << endl << account2.tostring() << endl;
  //cout << "My retirement savings: $"
  //     << fixed << setprecision(2)
  //     << account2.calculateRetirementSavings() << endl;
  //cout << endl;


  // more tests, demonstrate using arrays of classes and looping over classes
  // create 10 RetirementAccount's to perform some comparison calculations
  cout << "=== Larger number of tests, compare effect of increasing monthly deposit amount..................."
       << endl;
  //const int NUM_PLANS = 10;
  //RetirementAccount plan[NUM_PLANS];

  // set all accounts with same interest rate, periods and time, but different
  // deposit amounts
  //double D = 500.00; // base amount to deposit.
  //double m = 12.0;   // make monthly deposits
  //double r = 0.04;   // compound interest rate.
  //double t = 30.0;   // save for retirement for 30 years
  //for (int i = 0; i < NUM_PLANS; i++)
  //{
  //  plan[i].set_D(D + (i * 100.0));
  //  plan[i].set_m(m);
  //  plan[i].set_r(r);
  //  plan[i].set_t(t);

  //  cout << "Plan " << i << ":" << endl;
  //  cout << plan[i].tostring();
  //  cout << "    Total Savings: "
  //       << fixed << setprecision(2)
  //       << plan[i].calculateRetirementSavings() << endl;
  //}
  
  // return 0 to indicate successful completion
  return 0;
}
